#!/bin/bash
# svn-to-git
# Created Wed Jan 27 15:55:10 AKST 2016
# Copyright (C) 2016 by Raymond E. Marcil <marcilr@gmail.com>
#
# Convert subversion repository to git
#
# Usage:
#   svn-to-git <subversion repo to convert>
#

# ==============================================
# Configuration
# ==============================================

#
# Enable/disable debugging.
#
DEBUG=true


# ==============================================
# Binaries
# ==============================================
AWK=/usr/bin/awk
GIT=/usr/bin/git
GREP=/bin/grep
PERL=/usr/bin/perl
SED=/bin/sed
SORT=/usr/bin/sort
SVN=/usr/bin/svn
UNIQ=/usr/bin/uniq


# ==============================================
# Functions
# ==============================================

#
# debug()
# Output debugging text.
# INPUT: $1 - Text to output if DEBUG="
#
function debug {

  if [ ${DEBUG} = "true" ]; then
    echo "debug() ${1}"
  fi

}


#
# message()
# Display specified message passed as argument.
#
# INPUT
# =====
# Message to display as argument.
#
# RESULTS
# =======
# Displays argument to stdio.
#
function message {

  echo ${1}

}


#
# usage()
# Display usage and exit.
#
function usage(){
  message "Usage: ${0} <authors> <subversion repo>"
  message "   -d | --debug   Enable debugging."
  message "   -h | --help    Create non-hierarchical repository."
}

#
# process-cli-args()
#
# Links
# =====
# How to process command-line args in bash scripts
# http://debaan.blogspot.com/2007/06/how-to-process-command-line-args-in.html
#
function process-cli-args(){

  debug "process-cli-args() START"

  # Display number of command line arguments
  debug "process-cli-args() number args=${#commandline_args[@]}"

  # Loop over command line arguments (in correct order).
  for ARG in "${commandline_args[@]}"; do
    case ${ARG} in
      "-d" | "--debug")
        DEBUG=true
        debug "DEBUG=true"
        ;;
      "-h" | "--help")
        usage
        exit 0
        ;;
      *)
        debug "process-cli-args() processing: ${ARG}"
       #
       # If AUTHORS is set save SVNREPO
       #
       # How do I check if a variable exists in bash?
       # http://unix.stackexchange.com/questions/212183/how-do-i-check-if-a-variable-exists-in-bash
       #
       if [ -v AUTHORS ]; then
            SVNREPO=${ARG}
            debug "process-cli-args() SVNREPO=${SVNREPO}"
        else
            AUTHORS=${ARG}
            debug "process-cli-args() AUTHORS=${AUTHORS}"
        fi
        ;;
    esac
  done

  debug "process-cli-args() END"

} # end process-cli-args()



# ==============================================
# Main
# ==============================================

# Check argument count
ARGCOUNT=$#
debug "main: ARGCOUNT=$#"

# Abort with usage if there are not 2 arguments
if [ ${ARGCOUNT} != 2 ]; then
  usage
fi

# Get copy of command line arguments
commandline_args=("$@")

# Process command line arguments
process-cli-args

debug "main: AUTHORS = ${AUTHORS}"
debug "main: SVNREPO = ${SVNREPO}"

# Verify that AUTHORS file exists
if [ -f ${AUTHORS} ]; then
  debug "main: Found ${AUTHORS}"
else
  message "${AUTHORS} not found, aborting."
  exit 1
fi

# Get REPO name from end of SVNREPO string
REPO=`echo ${SVNREPO} | sed 's:.*/::g'`
debug "main: REPO = ${REPO}"

# Check if REPO exists already
if [ -d ${REPO} ]; then
  message "${REPO} exists already, aborting."
  exit 1
fi

# Build git command to clone subversion repo as git repo
CMD="${GIT} svn clone ${SVNREPO}"
CMD+=" --authors-file=${AUTHORS}"
CMD+=" --no-metadata"
CMD+=" ${REPO}"

debug "main: CMD=${CMD}"


# Execute command to clone subversion repo as git repo
debug "main: Executing: ${CMD}"
eval ${CMD}
