#!/bin/bash
# svn-to-git
# Created Mon Feb  1 15:28:03 AKST 2016
# Copyright (C) 2016 by Raymond E. Marcil <marcilr@gmail.com>
#
# Wrapper script to convert subversion repo to git.
# Converted script is then pushed to the specified target.
#

# ==============================================
# Configuration
# ==============================================

#
# Enable/disable debugging.
#
DEBUG=true

AUTHORS=authors.txt

# ==============================================
# Binaries
# ==============================================
AWK=/usr/bin/awk
GIT=/usr/bin/git

#
# Create on github or home
# Scans git url to determine target.
#
GITREPOCREATE=git-repo-create

GREP=/bin/grep
PERL=/usr/bin/perl
RM=/bin/rm
RSYNC=/usr/bin/rsync
SED=/bin/sed
SORT=/usr/bin/sort
SVN=/usr/bin/svn

# Get subversion authors
SVNTOGITAUTHORS=svn-to-git-authors

#
# Convert svn repo to git repo in working directory
# svn-to-git-convert <authors> <subversion repo>
#
SVNTOGITCONVERT=svn-to-git-convert

UNIQ=/usr/bin/uniq


# ==============================================
# Functions
# ==============================================

#
# debug()
# Output debugging text.
# INPUT: $1 - Text to output if DEBUG="
#
function debug {

  if [ ${DEBUG} = "true" ]; then
    echo "debug() ${1}"
  fi

}


#
# message()
# Display specified message passed as argument.
#
# INPUT
# =====
# Message to display as argument.
#
# RESULTS
# =======
# Displays argument to stdio.
#
function message {

  echo "${1}"

}


#
# usage()
# Display usage and exit.
#
function usage(){
  message "Usage: ${0} <subversion repo> <git repo>"
  message "   -d | --debug   Enable debugging."
  message "   -h | --help    Create non-hierarchical repository."
  message "   <subversion src repo> - like:"
  message "       svn+ssh://home/data/svnroot/software/daemons/ntp/ntp"
  message "   <git src repo> - like:"
  message "       ssh://git@github.com/marcilr/git-software-daemons-ntp"
}

#
# process-cli-args()
#
# Links
# =====
# How to process command-line args in bash scripts
# http://debaan.blogspot.com/2007/06/how-to-process-command-line-args-in.html
#
function process-cli-args(){

    debug "process-cli-args() START"

    # Display number of command line arguments
    debug "process-cli-args() number args = ${#commandline_args[@]}"

    # Loop over command line arguments (in correct order).
    for ARG in "${commandline_args[@]}"; do
        case ${ARG} in
            "-d" | "--debug")
                DEBUG=true
                debug "DEBUG=true"
                ;;
            "-h" | "--help")
                usage
                exit 0
                ;;
            *)
                debug "process-cli-args() processing: ${ARG}"
                #
                # If SVNPATH is set save GITPATH
                #
                # How do I check if a variable exists in bash?
                # http://unix.stackexchange.com/questions/212183/how-do-i-check-if-a-variable-exists-in-bash
                #
                if [ -v SVNPATH ]; then
                    GITPATH=${ARG}
                    debug "process-cli-args() GITPATH = ${GITPATH}"
                else
                    SVNPATH=${ARG}
                    debug "process-cli-args() SVNPATH = ${SVNPATH}"
                fi
                ;;
        esac
    done

    debug "process-cli-args() END"

} # end process-cli-args()


# ==============================================
# Main
# ==============================================

# Check argument count
ARGCOUNT=$#
debug "main: ARGCOUNT=$#"

# Abort with usage if there are not 2 arguments
if [ ${ARGCOUNT} != 2 ]; then
  usage
fi

# Get copy of command line arguments
commandline_args=("$@")

# Process command line arguments
process-cli-args

debug "main: SVNPATH = ${SVNPATH}"
debug "main: GITPATH = ${GITPATH}"

SVNREPO=`echo ${SVNPATH} | ${SED} 's:.*/::g'`
SVNREPO="${SVNREPO}-svn"
debug "main: SVNREPO = ${SVNREPO}"

GITREPO=`echo ${GITPATH} | ${SED} 's:.*/::g'`
debug "main: GITREPO = ${GITREPO}"

# Determine target SERVER from GITPATH
if [[ $GITPATH == *htpc/* ]]; then
    SERVER=htpc
elif [[ $GITPATH == *bornite/* ]]; then
    SERVER=bornite
elif [[ $GITPATH == *malachite/* ]]; then
    SERVER=malachite
elif [[ $GITPATH == *home/* ]]; then
    SERVER=home
fi
debug "main: SERVER = ${SERVER}"

# Determine target PATH from GITPATH
TARGETPATH=`echo ${GITPATH} | ${SED} "s:.*${SERVER}::g"`

# Remove git repo name from end of string to get target git path
TARGETPATH=`echo ${TARGETPATH} | ${SED} "s:/${GITREPO}::g"`
debug "main: TARGETPATH = ${TARGETPATH}"

# Checkout subversion repo:
if [ ! -d "${SVNREPO}" ]; then
    ${SVN} co ${SVNPATH} ${SVNREPO}
fi

# Get authors.txt with svn-to-git-authors
debug "main: SVNREPO: ${SVNREPO}"

CMD="cd ${SVNREPO}; ${SVNTOGITAUTHORS} > ../${AUTHORS}; cd .."
debug "main: Executing: ${CMD}"
eval "${CMD}"

# Convert svnrepo to gitrepo
if [ ! -d "${GITREPO}" ]; then
    CMD="${SVNTOGITCONVERT} ${AUTHORS} ${SVNPATH}"
    debug "main: Executing ${CMD}"
    eval "${CMD}"
else
    message "main: Local ${GITREPO} exists, *not* recreating."
fi


# Rsync git repository to target

# $ rsync -va --stats --progress ./gci htpc:/data/git/

#${RSYNC} -va --stats --progress ${GITREPO}
