#!/bin/bash
# git-repo-create
# Created Tue Feb  2 10:44:59 AKST 2016
# Copyright (C) 2016 by Raymond E. Marcil <marcilr@gmail.com>
#
# Create local or remote git repository.
#   git-repo-create <local git repo | remote repo>
#

# ==============================================
# Configuration
# ==============================================

#
# Enable/disable debugging.
#
DEBUG=true

#
# GitHub credentials file with USER, PASS, EMAIL,
# and TOKEN to access github repo.
#
CREDENTIALS=/home/${USERNAME}/.github


# ==============================================
# Binaries
# ==============================================
CHMOD=/bin/chmod
CHOWN=/bin/chown
GIT=/usr/bin/git
MKDIR=/bin/mkdir


# ==============================================
# Functions
# ==============================================

#
# debug()
# Output debugging text.
# INPUT: $1 - Text to output if DEBUG="
#
function debug {

  if [ ${DEBUG} = "true" ]; then
    echo "debug() ${1}"
  fi

}


#
# message()
# Display specified message passed as argument.
#
# INPUT
# =====
# Message to display as argument.
#
# RESULTS
# =======
# Displays argument to stdio.
#
function message {

  echo "${1}"

}


#
# usage()
# Display usage and exit.
#
function usage(){
  message "Usage: ${0} <git repo> <git target repo>"
  message "   -d | --debug        Enable debugging."
  message "   -h | --help         Create non-hierarchical repository."
  message "   <git repo>          Git repostory local or remote to create.  Like:"
  message "                       ssh://git@github.com/marcilr/git-net"
  message "                       ssh://marcilr@htpc/data/git/gci"
  message "                       myrepo"
}


#
# process-cli-args()
#
# Links
# =====
# How to process command-line args in bash scripts
# http://debaan.blogspot.com/2007/06/how-to-process-command-line-args-in.html
#
function process-cli-args(){

  debug "process-cli-args() START"

  # Display number of command line arguments
  debug "process-cli-args() number args=${#commandline_args[@]}"

  # Loop over command line arguments (in correct order).
  for ARG in "${commandline_args[@]}"; do
    case ${ARG} in
      "-d" | "--debug")
        DEBUG=true
        debug "DEBUG=true"
        ;;
      "-h" | "--help")
        usage
        exit 0
        ;;
      *)
        debug "process-cli-args() processing: ${ARG}"
        REPOPATH=${ARG}
        debug "process-cli-args() REPOPATH=${REPOPATH}"
        #
        # If SVNPATH is set save GITPATH
        #
        # How do I check if a variable exists in bash?
        # http://unix.stackexchange.com/questions/212183/how-do-i-check-if-a-variable-exists-in-bash
        #
        #if [ -v GITREPO ]; then
        #     GITREMOTE=${ARG}
        #     debug "process-cli-args() GITREMOTE=${GITREMOTE}"
        # else
        #     GITREPO=${ARG}
        #     debug "process-cli-args() GITREPO=${GITREPO}"
        # fi
        ;;
    esac
  done

  debug "process-cli-args() GITREPO = ${GITREPO}"
  debug "process-cli-args() GITREMOTE = ${GITREMOTE}"

  debug "process-cli-args() END"

} # end process-cli-args()



# ==============================================
# Main
# ==============================================
debug "git-repo-create START"

# Check argument count
ARGCOUNT=$#
debug "main: ARGCOUNT=$#"

# Print usage and abort if no arguments
if [ -z "$1" ]; then
  usage
  exit 1
fi

# Check for ~/.github credentials file and source
if [ ! -f ${CREDENTIALS} ]; then
  message "${CREDENTIALS} not found, aborting."
  exit 1
else
  . ${CREDENTIALS}
  debug "main: github USER = ${USER}"
  debug "main: github PASS = ***"
  debug "main: github EMAIL = ${EMAIL}"
  debug "main: github TOKEN = ***"
fi

# Get copy of command line arguments
commandline_args=("$@")

# Process command line arguments
process-cli-args

debug "main: REPOPATH = ${REPOPATH}"

if [[ $REPOPATH == ssh://* ]]; then
    debug "main: Creating remote repo via ssh"

    if [[ $REPOPATH == *htpc/* ]]; then
        debug "main: Processing htpc path"
    elif [[ $REPOPATH == *bornite/* ]]; then
        debug "main: Processing bornite path"
    elif [[ $REPOPATH == *malachite/* ]]; then
        debug "main: Processing malachite path"
    elif [[ $REPOPATH == *home/* ]]; then
        debug "main: Processing home path"
    elif [[ $REPOPATH == *github/* ]]; then
        debug "main: Processing github path"
    fi

elif [[ $REPOPATH == https://* ]]; then
    debug "main: Creating remote repo via https"

else
    if [ -d ${REPOPATH} ]; then
        message "${REPOPATH} exists already, aborting."
        exit 1
    else
        # Create git repo on local filesystem
        debug "main: Creating ${REPOPATH} directory"
        ${MKDIR} -p "${REPOPATH}"
        ${CHMOD} 775 "${REPOPATH}"
        ${CHMOD} g+ws "${REPOPATH}"
        cd "${REPOPATH}"
        debug "main: Initializing ${REPOPATH} repo"
        ${GIT} init
        cd ..
   fi
fi


#if [[ $REPOPATH == ssh://git@github.com/* ]]; then
#    debug "main: Creating github repo: ${REPOPATH}"

#elif [[ $REPOPATH == ssh://marcilr@htpc/data/gti/* ]]; then
#    debug "main: Creating htpc repo: ${REPOPATH}"

#elif [[ $REPOPATH == ssh://marcilr@bornite/data/git/* ]]; then
#    debug "main: Creating bornite repo: ${REPOPATH}"

#fi



debug "git-repo-create END"
