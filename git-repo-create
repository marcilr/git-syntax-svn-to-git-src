#!/bin/bash
# git-repo-create
# Created Tue Feb  2 10:44:59 AKST 2016
# Copyright (C) 2016 by Raymond E. Marcil <marcilr@gmail.com>
#
# Create local or remote git repository.
#   git-repo-create <local git repo | remote repo>
#
# Links
# =====
# A curl tutorial using GitHub's API
# Great documentation and syntax here
# Create repo:
#   curl -H "Authorization: token PUT-YOUR-AUTH-TOKEN-HERE" \
#   https://api.github.com/user/repos \
#   -d '{"name": "PUT-YOUR-REPO-NAME-HERE"}'
# https://gist.github.com/caspyin/2288960
#
# GitHub API docmentation
# Great documentation here
# https://developer.github.com/v3/
#

# ==============================================
# Configuration
# ==============================================

#
# Enable/disable debugging.
#
DEBUG=true

#
# GitHub credentials file with USER, PASS, EMAIL,
# and TOKEN to access github repo.
#
CREDENTIALS=/home/${USERNAME}/.github


# ==============================================
# Binaries
# ==============================================
CHMOD=/bin/chmod
CHOWN=/bin/chown
CURL=/usr/bin/curl
GIT=/usr/bin/git
MKDIR=/bin/mkdir
SED=/bin/sed
SSH=/usr/bin/ssh

# ==============================================
# Functions
# ==============================================

#
# debug()
# Output debugging text.
# INPUT: $1 - Text to output if DEBUG="
#
function debug {

  if [ ${DEBUG} = "true" ]; then
    echo "debug() ${1}"
  fi

}


#
# message()
# Display specified message passed as argument.
#
# INPUT
# =====
# Message to display as argument.
#
# RESULTS
# =======
# Displays argument to stdio.
#
function message {

  echo "${1}"

}


#
# usage()
# Display usage and exit.
#
function usage(){
  message "Usage: ${0} <git repo>"
  message "   -d | --debug        Enable debugging."
  message "   -h | --help         Create non-hierarchical repository."
  message "   <git repo>          Git repostory local or remote to create.  Like:"
  message "                       ssh://git@github.com/marcilr/git-net"
  message "                       ssh://marcilr@htpc/data/git/gci"
  message "                       myrepo"
}


#
# process-cli-args()
#
# Links
# =====
# How to process command-line args in bash scripts
# http://debaan.blogspot.com/2007/06/how-to-process-command-line-args-in.html
#
function process-cli-args(){

  debug "process-cli-args() START"

  # Display number of command line arguments
  debug "process-cli-args() number args=${#commandline_args[@]}"

  # Loop over command line arguments (in correct order).
  for ARG in "${commandline_args[@]}"; do
    case ${ARG} in
      "-d" | "--debug")
        DEBUG=true
        debug "DEBUG=true"
        ;;
      "-h" | "--help")
        usage
        exit 0
        ;;
      *)
        debug "process-cli-args() processing: ${ARG}"
        REPOPATH=${ARG}
        debug "process-cli-args() REPOPATH=${REPOPATH}"
        ;;
    esac
  done

  debug "process-cli-args() GITREPO = ${GITREPO}"
  debug "process-cli-args() GITREMOTE = ${GITREMOTE}"

  debug "process-cli-args() END"

} # end process-cli-args()


#
# get-credentials()
# Get USER, PASS, TOKEN, and EMAIL credentials
# from ~/.github
#
# INPUT  - ~/.github
# OUTPUT - Sets  USER, PASS, TOKEN, and EMAIL credentials
#
function get-credentials {

    debug "get-credentials() START"

    #
    # Source github crentials from ~/.github
    #
    debug "main: CREDENTIALS: ${CREDENTIALS}"
    if [ ! -f ${CREDENTIALS} ]; then
        message "~/.github file, with GitHub credentials (USER,PASS,EMAIL,TOKEN), not found, aborting."
        exit 1
    fi

    . ${CREDENTIALS}
    debug "get-credentials() USER = ${USER}"
    debug "get-credentials() PASS = ***"
    debug "get-credentials() EMAIL = ${EMAIL}"
    debug "get-credentials() TOKEN = ***"

    debug "get-credentials() END"

} # end get-credentails()


#
# process-home()
# Process git repository creation for home target.
#
# Dependencies:
# Relies on ~/.ssh/config being configured with bornite, htpc, home,
# and malachite hosts for access to these systems.
#
function process-home(){

  debug "process-home() START"
  debug "process-home() SERVER = ${SERVER}"

  #
  # Get repo path to process
  # Remove leading ssh://htpx or ssh://home
  #
  PATH=`echo ${REPOPATH} | ${SED} "s:.*$SERVER::g"`
  debug "process-home() PATH = ${PATH}"

  # Check if directory exists on host
  CMD="${SSH} ${SERVER} 'if [ -d ${PATH} ]; then echo "exists"; fi'"
  debug "process-home() Executing: ${CMD}"
  RESULT=`eval "${CMD}"`

  debug "process-home() RESULT = ${RESULT}"
  if [ "${RESULT}" == "exists" ]; then
      message "${PATH} exists already, *not* recreating."
  else
      message "Creating ${PATH} directory on ${SERVER}..."

      # Create directory for git repo
      CMD="${SSH} ${SERVER} '${MKDIR} -p ${PATH}'"
      debug "process-home() Executing: ${CMD}"
      eval "${CMD}"

      # Initialize git repo
      CMD="${SSH} ${SERVER} '/usr/bin/git init ${PATH}'"
      debug "process-home() Executing: ${CMD}"
      eval "${CMD}"

      # Recursively set privs drwxrwsr-x on directory for git repo
      CMD="${SSH} ${SERVER} '/bin/chmod -R 2775 ${PATH}'"
      debug "process-home() Executing: ${CMD}"
      eval "${CMD}"

      # Check if ${PATH}/.git directory not exists on host
      CMD="${SSH} ${SERVER} 'if [ -d ${PATH}/.git ]; then echo "exists"; fi'"
      debug "process-home() Executing: ${CMD}"
      RESULT=`eval "${CMD}"`

      if [ "${RESULT}" == "exists" ]; then
          message "process-home() Created ${REPOPATH} remote"
      else
          message "process-home() Failed to create ${REPOPATH} remote"
      fi # end if [ "${RESULT}" == "exists" ]; then

  fi # end if [ "${RESULT}" == "exists" ]; then

  debug "process-home() END"

} # end process-home()


#
# repos-get-paths()
# Get github https and ssh repo paths
#
# INPUT  - REPO to use in paths
#          USER from ~/.github
# OUTPUT - REPOHTTPSPATH https github repo path
#          REPOSSHPAT ssh gtihub repo path
# USES -   debug()
#
function repos-get-paths {

    debug "repos-get-paths() START"

    REPOHTTPSPATH="https://api.github.com/repos/${USER}/${REPO}"
    debug "main: REPOHTTPSPATH = ${REPOHTTPSPATH}"

    REPOSSHPATH="ssh://git@github.com/${USER}/${REPO}"
    debug "main: REPOSSHPATH = ${REPOSSHPATH}"

    debug "repos-get-paths() END"

} # end repos-get-paths()


#
# process-github()
# Process creation of github repo.
#
# A curl tutorial using GitHub's API
# Great documentation and syntax here
# Create repo:
#   curl -H "Authorization: token PUT-YOUR-AUTH-TOKEN-HERE" \
#   https://api.github.com/user/repos \
#   -d '{"name": "PUT-YOUR-REPO-NAME-HERE"}'
# https://gist.github.com/caspyin/2288960
#
function process-github(){

    debug "process-github() START"
    debug "process-github() REPOPATH = ${REPOPATH}"

    # Extract github repo name from REPOPATH
    REPO=`echo ${REPOPATH} | ${SED} 's:.*/::g'`
    debug "process-github() REPO = ${REPO}"

    # Get REPOHTTPSPATH and REPOSSHPATH
    repos-get-paths
    debug "process-github() REPOHTTPSPATH = ${REPOHTTPSPATH}"
    debug "process-github() REPOSSHPATH = ${REPOSSHPATH}"

    #
    # Check that github repository does not exist using:
    #   curl https://api.github.com/repos/<user>/<repo>
    #
    # If repo *does not* exist RESULT will contain:
    # {
    #   "message": "Not Found",
    #   "documentation_url": "https://developer.github.com/v3"
    # }
    #
    # The use of curl seems more straightforward that he use of:
    #   git ls-remote ssh://git@github.com/<user>/<repo>
    #
    # If repo *does not* exist RESULT will contain:
    #   "ERROR: Repository not found."
    #
    # Check that git repository exists
    # http://stackoverflow.com/questions/23914896/check-that-git-repository-exists
    #

    RESULT=`curl ${REPOHTTPSPATH} 2>/dev/null`
    #debug "process-github RESULT = ${RESULT}"

    #
    # NOTE: Send error to /dev/null to suppress output like:
    #   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
    #                                Dload  Upload   Total   Spent    Left  Speed
    # 100    87  100    87    0     0    170      0 --:--:-- --:--:-- --:--:--   170
    #
    if [[ ${RESULT} == *"Not Found"* ]]; then
        echo "${REPO} repo not found, creating..."

        #
        # Create github repo via command line
        #
        # Links
        # =====
        # Create a Github Repo from the Command Line
        #   curl -u "$username:$token" https://api.github.com/user/repos \
        #   -d '{"name":"'$repo_name'"}'
        # https://viget.com/extend/create-a-github-repo-from-the-command-line
        #
        # $ curl -H "Authorization: token ${TOKEN}" \
        # https://api.github.com/user/repos -d '{"name": "REPO"}'
        #
        CMD="${CURL} -H \"Authorization: token ${TOKEN}\" "
        CMD+="https://api.github.com/user/repos -d '{\"name\": \"${REPO}\"}'"
        debug "process-github: Executing ${CMD}"

        # Evaluate command to create repository
        eval "${CMD}"

    else
        echo "${REPO} already exists, aborting."
        exit 1
    fi

    #
    # Check that git repo was created.
    #
    RESULT=`${CURL} ${REPOHTTPSPATH} 2>/dev/null`
    if [[ ${RESULT} == *"Not Found"* ]]; then
        message "${REPO} repo not found, creation failed."
        exit 1
    else
        message "${REPO} created."
    fi

    debug "process-github() END"

} # end process-github()


# ==============================================
# Main
# ==============================================
debug "git-repo-create START"

# Check argument count
ARGCOUNT=$#
debug "main: ARGCOUNT=$#"

# Print usage and abort if no arguments
if [ -z "$1" ]; then
  usage
  exit 1
fi

# Fetch github credentials from ~/.github
get-credentials

# Get copy of command line arguments
commandline_args=("$@")

# Process command line arguments
process-cli-args

debug "main: REPOPATH = ${REPOPATH}"

#
# Check for github repo.
# URL type does not matter.  Either ssh:// or https:// will work.
#
debug "main: REPOPATH = ${REPOPATH}"
if [[ $REPOPATH == *github* ]]; then
    debug "main: Processing github path"
    process-github

elif [[ $REPOPATH == ssh://* ]]; then
    debug "main: Creating remote repo via ssh"

    if [[ $REPOPATH == *htpc/* ]]; then
        debug "main: Processing htpc path"
        SERVER=htpc
        process-home
    elif [[ $REPOPATH == *bornite/* ]]; then
        debug "main: Processing bornite path"
        SERVER=bornite
        process-home
    elif [[ $REPOPATH == *malachite/* ]]; then
        debug "main: Processing malachite path"
        SERVER=malachite
        process-home
    elif [[ $REPOPATH == *home/* ]]; then
        debug "main: Processing home path"
        SERVER=home
        process-home
    fi

else
    # Check if local repo exists already
    if [ -d ${REPOPATH} ]; then
        message "${REPOPATH} exists already, aborting."
        exit 1
    else
        # Create git repo on local filesystem
        debug "main: Creating ${REPOPATH} directory"
        ${MKDIR} -p "${REPOPATH}"
        ${CHMOD} 775 "${REPOPATH}"
        ${CHMOD} g+ws "${REPOPATH}"
        cd "${REPOPATH}"
        debug "main: Initializing ${REPOPATH} repo"
        ${GIT} init
        cd ..
   fi   # end if [ -d ${REPOPATH} ]; then
fi   # end if [[ $REPOPATH == *github* ]]; then


debug "git-repo-create END"

exit 0
